<?php

namespace App\Http\Controllers;

use App\Ban;
use App\Events\Score;
use App\Events\TaskUpdate;
use App\Task;
use App\User;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Log;
use Telegram\Bot\Laravel\Facades\Telegram;

class MainController extends Controller
{
    public function __construct()
    {
        $this->middleware('auth', ['except' => ['rules', 'webhook']]);
    }

    public function rules()
    {
        return view('rules');
    }

    public function index()
    {
        $tasks = Task::all();
        return view('index')->with('tasks', $tasks);
    }

    public function takeTask(Request $request)
    {
        $task = Task::find($request->task_id);

        if ($request->is_taking == "true") {
            $teamTasks = Task::whereUserId(Auth::user()->id)->whereStatus(1)->get();

            if (count($teamTasks) > 0) {
                return response('Have another task', 409);
            }

            $task->update([
                'user_id' => Auth::user()->id,
                'status' => 1,
            ]);
            $text = "üö≤ –ö–æ–º–∞–Ω–¥–∞ <b>" . $task->user->name . "</b> –ø—Ä–∏—Å—Ç—É–ø–∏–ª–∞ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é –∑–∞–¥–∞–Ω–∏—è <b>" . $task->name . "</b>.";
        } else {
            $task->update([
                'user_id' => 0,
                'status' => 0,
            ]);
            $text = "üé≤ –ó–∞–¥–∞–Ω–∏–µ <b>" . $task->name . "</b> —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏.";
        }
        event(new TaskUpdate($task));
 
        Telegram::sendMessage([
            'chat_id' => config('telegram.channel'),
            'parse_mode' => 'HTML',
            'text' => $text,
        ]);

        return $request;
    }

    public function setScore(Request $request)
    {
        $user = User::find(Auth::user()->id);
        $score_to_save = $user->score;
        $newScore = json_decode($request);
        $user->score = $request->score + $score_to_save;
        $user->read_rules = true;
        $user->save();
        return response($request->score, 200);
    }

    public function checkTakenTasks(Request $request)
    {
        $bannedTasks = User::find(Auth::user()->id)->bans;

        $tasks = Task::all();
        $taskToSend = [];
        $temp_time = 0;
        foreach ($tasks as $task) {
            if (strtotime($task->updated_at) > $request->timestamp) {
                array_push($taskToSend, $task);
                if (strtotime($task->updated_at) > $temp_time) {
                    $temp_time = strtotime($task->updated_at);
                }

            }
        }
        $timestamp = ($temp_time != 0) ? $temp_time : $request->timestamp;

        if (count($bannedTasks) != $request->banned_tasks) {
            array_push($taskToSend, $timestamp);
            array_push($taskToSend, $bannedTasks);
            return $taskToSend;
        }
        if (count($taskToSend) != 0) {
            array_push($taskToSend, $timestamp);
            return $taskToSend;
        }
        return response('ok', 204);
    }

    public function sendAnswer(Request $request)
    {
        $task = Task::find($request->task_id);

        if ($task->type == 1) {
            $task->update([
                'status' => 2,
            ]);
        }
        if ($task->type == 2) {
            $ban = Ban::create([
                'user_id' => Auth::user()->id,
                'task_id' => $request->task_id,
            ]); //TODO: make BAN work
        }
        event(new TaskUpdate($task));

        return response('ok', 200);
    }

    public function webhook()
    {
        $updates = Telegram::getWebhookUpdates();
        Log::info($updates);
        if ($updates->channel_post == null || $updates->channel_post->chat->id != -1001308540909) {
            return response('Nothing', 204);
        }

        $commandText = $updates->channel_post->text;
        $commandArray = explode(' ', $commandText);
        $command = $commandArray[0];
        $number = count($commandArray) > 1 ? (int) $commandArray[1] : 1;
        $secondNumber = count($commandArray) > 2 ? (int) $commandArray[2] : 1;
        $text_to_admin = "";

        $task = Task::find($number);
        switch ($command) {
            case '/list':
                $users = User::orderBy('score', 'desc')->get();
                foreach ($users as $k => $user) {
                    switch ($k) {
                        case 0:$text_to_admin .= "------------------ü•á------------------\n<b>ID –∫–æ–º–∞–Ω–¥—ã:</b> " . $user->id
                            . "\n<b>–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã:</b> " . $user->name . "\n<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤:</b> " . $user->score . "\n";
                            break;
                        case 1:$text_to_admin .= "------------------ü•à------------------\n<b>ID –∫–æ–º–∞–Ω–¥—ã:</b> " . $user->id
                            . "\n<b>–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã:</b> " . $user->name . "\n<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤:</b> " . $user->score . "\n";
                            break;
                        case 2:$text_to_admin .= "------------------ü•â------------------\n<b>ID –∫–æ–º–∞–Ω–¥—ã:</b> " . $user->id
                            . "\n<b>–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã:</b> " . $user->name . "\n<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤:</b> " . $user->score . "\n";
                            break;
                        default:$text_to_admin .= "--------------------------------------\n<b>ID –∫–æ–º–∞–Ω–¥—ã:</b> " . $user->id
                            . "\n<b>–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã:</b> " . $user->name . "\n<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤:</b> " . $user->score . "\n";
                            break;
                    }
                }
                $text_to_admin .= "--------------------------------------\n";
                break;
            case '/clear_team':
                $user = User::find($number);
                $user->score = 0;
                $user->save();
                $text_to_admin = "–ü—Ä–æ–≥—Ä–µ—Å—Å –∫–æ–º–∞–Ω–¥—ã <b>" . $user->name . "</b> –æ–±–Ω—É–ª–µ–Ω!\n";
                break;
            case '/clear_ban':
                $bans = Ban::where('user_id', $number)->where('task_id', $secondNumber)->delete();
                $user = User::find($number);
                $task = Task::find($secondNumber);
                $text_to_admin = "–ó–∞–¥–∞–Ω–∏–µ <b>" . $task->name . "</b> –∫–æ–º–∞–Ω–¥—ã <b>" . $user->name . "</b> —Ä–∞–∑–±–∞–Ω–µ–Ω–æ!\n";
                $text_to_users = "üö¶ –ó–∞–¥–∞–Ω–∏–µ <b>" . $task->name . "</b> –∫–æ–º–∞–Ω–¥—ã <b>" . $user->name . "</b> —Ä–∞–∑–±–∞–Ω–µ–Ω–æ!\n";
                Telegram::sendMessage([
                    'chat_id' => config('telegram.channel'),
                    'parse_mode' => 'HTML',
                    'text' => $text_to_users,
                ]);
                break;
            case '/add':
                $user = User::find($number);
                if (is_null($user)) {
                    $text_to_admin = "–ö–æ–º–∞–Ω–¥—ã —Å —Ç–∞–∫–∏–º ID –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!\n";
                    break;
                }
                $score_to_save = $user->score;
                $user->score = $score_to_save + $secondNumber;
                $user->save();
                $text_to_admin = "–ö–æ–º–∞–Ω–¥–µ <b>" . $user->name . "</b> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ <b>" . $secondNumber . "</b> –æ—á–∫–æ–≤!\n";
                $text_to_users = "‚ö°Ô∏è –ö–æ–º–∞–Ω–¥–µ <b>" . $user->name . "</b> –¥–æ–±–∞–≤–ª–µ–Ω–æ <b>" . $secondNumber . "</b> –æ—á–∫–æ–≤!\n";

                event(new Score($user));

                Telegram::sendMessage([
                    'chat_id' => config('telegram.channel'),
                    'parse_mode' => 'HTML',
                    'text' => $text_to_users,
                ]);
                break;
            case '/remove':
                $user = User::find($number);
                if (is_null($user)) {
                    $text_to_admin = "–ö–æ–º–∞–Ω–¥—ã —Å —Ç–∞–∫–∏–º ID –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!\n";
                    break;
                }
                $score_to_save = $user->score;
                $user->score = $score_to_save - $secondNumber;
                $user->save();
                $text_to_admin = "–ö–æ–º–∞–Ω–¥–µ <b>" . $user->name . "</b> —É—Å–ø–µ—à–Ω–æ –æ—Ç–Ω—è—Ç–æ <b>" . $secondNumber . "</b> –æ—á–∫–æ–≤!\n";
                $text_to_users = "‚ö°Ô∏è –ö–æ–º–∞–Ω–¥–µ <b>" . $user->name . "</b> –æ—Ç–Ω—è—Ç–æ <b>" . $secondNumber . "</b> –æ—á–∫–æ–≤!\n";

                event(new Score($user));

                Telegram::sendMessage([
                    'chat_id' => config('telegram.channel'),
                    'parse_mode' => 'HTML',
                    'text' => $text_to_users,
                ]);
                break;
            default:
                if ($task != null) {
                    switch ($command) {
                        case '/done':
                            if ($task->user_id == 0) {
                                $text_to_admin = "–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞–Ω–∏—è <b>‚Ññ$number</b> –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –í—ã–ø–æ–ª–Ω–µ–Ω–æ: –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ –Ω–∏ –∑–∞ –∫–∞–∫–æ–π –∫–æ–º–∞–Ω–¥–æ–π!\n";
                                break;
                            }
                            $task->status = 3;
                            $text_to_admin = "–¢–µ–ø–µ—Ä—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞–Ω–∏—è <b>‚Ññ$number</b> : –í—ã–ø–æ–ª–Ω–µ–Ω–æ!\n";

                            $score_to_save = $task->user->score;
                            $user = $task->user;
                            $user->score = $score_to_save + $task->score;
                            $user->save();

                            event(new Score($user));

                            $text_to_users = "üéâ –ó–∞–¥–∞–Ω–∏–µ <b>" . $task->name . "</b> —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∫–æ–º–∞–Ω–¥–æ–π <b>" . $task->user->name . "</b>.";
                            Telegram::sendMessage([
                                'chat_id' => config('telegram.channel'),
                                'parse_mode' => 'HTML',
                                'text' => $text_to_users,
                            ]);
                            break;
                        case '/work':
                            if ($task->user_id == 0) {
                                $text_to_admin = "–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞–Ω–∏—è <b>‚Ññ$number</b> –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –í —Ä–∞–±–æ—Ç–µ: –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ –Ω–∏ –∑–∞ –∫–∞–∫–æ–π –∫–æ–º–∞–Ω–¥–æ–π!\n";
                                break;
                            }
                            $task->status = 1;
                            $text_to_admin = "–¢–µ–ø–µ—Ä—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞–Ω–∏—è <b>‚Ññ$number</b> : –í —Ä–∞–±–æ—Ç–µ!\n";
                            $text_to_users = "‚ö†Ô∏è –ó–∞–¥–∞–Ω–∏–µ <b>" . $task->name . "</b> –≤—ã–ø–æ–ª–Ω—è–µ–º–æ–µ –∫–æ–º–∞–Ω–¥–æ–π <b>" . $task->user->name . "</b> —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏. –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ "
                                . "–ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∑–∞–¥–∞–Ω–∏—é –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∫—É —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.Ô∏è";

                            Telegram::sendMessage([
                                'chat_id' => config('telegram.channel'),
                                'parse_mode' => 'HTML',
                                'text' => $text_to_users,
                            ]);
                            break;
                        case '/ban':
                            $ban = new Ban;
                            $ban->user_id = $task->user_id;
                            $ban->task_id = $task->id;
                            $ban->save();

                            $text_to_admin = "–¢–µ–ø–µ—Ä—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞–Ω–∏—è <b>‚Ññ$number</b> : –û—Ç–∫—Ä—ã—Ç–æ!\n–î–ª—è –∫–æ–º–∞–Ω–¥—ã <b>" . $task->user->name . "</b> –¥–æ—Å—Ç—É–ø –∫ –∑–∞–¥–∞–Ω–∏—é –∑–∞–∫—Ä—ã—Ç!";
                            $text_to_users = "üé≤ –ó–∞–¥–∞–Ω–∏–µ <b>" . $task->name . "</b> —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏.\nüöß –ö–æ–º–∞–Ω–¥–∞ <b>" . $task->user->name . "</b> –ø—Ä–æ–≤–∞–ª–∏–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è.";
                            $task->status = 0;
                            $task->user_id = 0;

                            Telegram::sendMessage([
                                'chat_id' => config('telegram.channel'),
                                'parse_mode' => 'HTML',
                                'text' => $text_to_users,
                            ]);
                            break;
                        case '/clear':
                            $task->user_id = 0;
                            $task->status = 0;
                            $task->save();

                            $text_to_admin = "–¢–µ–ø–µ—Ä—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞–Ω–∏—è <b>‚Ññ$number</b> : –û—Ç–∫—Ä—ã—Ç–æ!\n";
                            $text_to_users = "üé≤ –ó–∞–¥–∞–Ω–∏–µ <b>" . $task->name . "</b> —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏.";
                            $task->status = 0;
                            $task->user_id = 0;

                            Telegram::sendMessage([
                                'chat_id' => config('telegram.channel'),
                                'parse_mode' => 'HTML',
                                'text' => $text_to_users,
                            ]);
                            break;
                        default:$text_to_admin = "<b>–¢–∞–∫–∞—è –∑–∞–¥–∞—á–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!</b>\n";
                            break;
                    }
                    $task->save();
                    
                    event(new TaskUpdate($task));
                } else {
                    $text_to_admin = "<b>–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∫–æ–º–∞–Ω–¥–∞!</b>\n";
                }
                break;
        }
        Telegram::sendMessage([
            'chat_id' => '-1001308540909',
            'parse_mode' => 'HTML',
            'text' => $text_to_admin,
        ]);
        return response('ok', 200);
    }
}

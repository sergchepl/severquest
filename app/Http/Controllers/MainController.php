<?php

namespace App\Http\Controllers;

use App\Ban;
use App\Events\BanUpdate;
use App\Events\TaskUpdate;
use App\Helpers\KeyboardButton;
use App\Helpers\Webhook;
use App\Task;
use App\User;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Telegram\Bot\FileUpload\InputFile;
use Telegram\Bot\Objects\CallbackQuery;
use Telegram\Bot\Laravel\Facades\Telegram;

class MainController extends Controller
{
    use Webhook;

    public function __construct()
    {
        $this->middleware('auth', ['except' => ['rules', 'webhook']]);
    }

    public function rules()
    {
        return view('rules');
    }

    public function index()
    {
        $tasks = Task::all();
        return view('index')->with('tasks', $tasks);
    }

    public function takeTask(Task $task)
    {
        $teamTasks = Task::whereUserId(Auth::user()->id)->whereStatus(1)->get();

        if (count($teamTasks) > 0) {
            return response('Have another task', 409);
        }
        $task->take(Auth::user()->id);
        event(new TaskUpdate($task));

        $this->sendTelegramMessage("üö≤ –ö–æ–º–∞–Ω–¥–∞ <b>" . $task->user->name . "</b> –ø—Ä–∏—Å—Ç—É–ø–∏–ª–∞ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é –∑–∞–¥–∞–Ω–∏—è <b>" . $task->name . "</b>.");

        return 200;
    }

    public function cancelTask(Task $task)
    {
        $task->clear();
        event(new TaskUpdate($task));

        $this->sendTelegramMessage("üé≤ –ó–∞–¥–∞–Ω–∏–µ <b>" . $task->name . "</b> —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏.");

        return 200;
    }

    public function setScore(Request $request)
    {
        $user = User::find(Auth::user()->id);

        $user->readRules($request->score);

        return response($request->score, 200);
    }

    public function checkTask(Request $request, Task $task)
    {
        $photo = ($request->file('files')) ? $request->file('files') : null;

        if ($task->type == 1) {
            $task->check();

            event(new TaskUpdate($task));

            $text_to_admin = "<b>–ó–∞–¥–∞–Ω–∏–µ ‚Ññ" . $task->id . " –ø—Ä–∏—à–ª–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!</b>\n"
            . "–ù–∞–∑–≤–∞–Ω–∏–µ : " . $task->name . "\n"
            . "–ö–æ–º–∞–Ω–¥–∞ : " . $task->user->name . "\n"
            . "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–æ–º–∞–Ω–¥—ã : " . $request->text;
            $text_to_users = "üí° –ó–∞–¥–∞–Ω–∏–µ <b>" . $task->name . "</b> –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, –æ–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏.";

            $reply_buttons = [
                KeyboardButton::createSingleTaskButton('–í—ã–ø–æ–ª–Ω–∏—Ç—å', ['task_id' => $task->id, 'status' => 3]),
                KeyboardButton::createSingleTaskButton('–í –†–∞–±–æ—Ç—É', ['task_id' => $task->id, 'status' => 1]),
                KeyboardButton::createSingleTaskButton('–û—á–∏—Å—Ç–∏—Ç—å', ['task_id' => $task->id, 'status' => 0]),
                KeyboardButton::createSingleTaskButton('–ó–∞–±–∞–Ω–∏—Ç—å', ['task_id' => $task->id, 'status' => 4]),
            ];
        }
        if ($task->type == 2) {
            $ban = Ban::banTask(Auth::user()->id, $task->id);

            event(new BanUpdate($ban, true));

            $text_to_admin = "<b>üî• –û–±—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ ‚Ññ" . $task->id . " –ø—Ä–∏—à–ª–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!</b> üî•\n"
            . "–ù–∞–∑–≤–∞–Ω–∏–µ : " . $task->name . "\n"
            . "–ö–æ–º–∞–Ω–¥–∞ : " . \Auth::user()->name . "\n"
            . "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–æ–º–∞–Ω–¥—ã : " . $request->text;
            $text_to_users = "üî• –û–±—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ <b>" . $task->name . "</b> –∫–æ–º–∞–Ω–¥—ã <b>" . \Auth::user()->name . "</b> —É—Å–ø–µ—à–Ω–æ —Å–¥–∞–Ω–æ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, –æ—Ç–≤–µ—Ç –±—É–¥–µ—Ç –≤ –∫–æ–Ω—Ü–µ –∏–≥—Ä—ã SeverQuest.";

            $reply_buttons = [
                KeyboardButton::createCommonTaskButton('–ó–∞—Å—á–∏—Ç–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–µ', ['task_id' => $task->id, 'user_id' => Auth::user()->id]),
            ];
        }
        $message = $this->sendTelegramMessage($text_to_admin, $reply_buttons, '-1001308540909');

        if (!is_null($photo)) {
            foreach ($photo as $ph) {
                $photo = InputFile::createFromContents(file_get_contents($ph->getRealPath()), str_random(10) . '.' . $ph->getClientOriginalExtension());
                $message_id = $message->message_id;

                $this->sendTelegramPhoto($photo, $message_id);
            }
        }

        $this->sendTelegramMessage($text_to_users);

        return response('ok', 200);
    }

    public function webhook(Request $request)
    {
        $callback = new CallbackQuery($request->toArray());
        \Log::info($callback);

        if (is_null($request->callback_query)) {
            \Log::info($request->toArray());
            return response('Nothing', 204);
        }
        $callback_query_id = $callback->callback_query->id;
        $message_id = $callback->callback_query->message->message_id;
        $callback_data = json_decode($callback->callback_query->data);

        if ($callback_data->type == 'single-task') {
            $answer = $this->webhookSingleTaskKeyboard($callback_data->data);
        }
        if ($callback_data->type == 'common-task') {
            $answer = $this->webhookCommonTaskKeyboard($callback_data->data);
        }
        $this->sendTelegramMessage($answer['to_users']);
        $this->clearMessageReplyMarkup($message_id);
        $this->sendAnswerCallbackQuery($callback_query_id, $answer['to_admin']);

        return response('ok', 200);

        // if ($updates->channel_post == null || $updates->channel_post->chat->id != -1001308540909) {
        //     return response('Nothing', 204);
        // }

        // $commandText = $updates->channel_post->text;
        // $commandArray = explode(' ', $commandText);
        // $command = $commandArray[0];
        // $number = count($commandArray) > 1 ? (int) $commandArray[1] : 1;
        // $secondNumber = count($commandArray) > 2 ? (int) $commandArray[2] : 1;
        // $text_to_admin = "";

        // $task = Task::find($number);
        // switch ($command) {
        //     case '/list':
        //         $users = User::orderBy('score', 'desc')->get();
        //         foreach ($users as $k => $user) {
        //             switch ($k) {
        //                 case 0:$text_to_admin .= "------------------ü•á------------------\n<b>ID –∫–æ–º–∞–Ω–¥—ã:</b> " . $user->id
        //                     . "\n<b>–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã:</b> " . $user->name . "\n<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤:</b> " . $user->score . "\n";
        //                     break;
        //                 case 1:$text_to_admin .= "------------------ü•à------------------\n<b>ID –∫–æ–º–∞–Ω–¥—ã:</b> " . $user->id
        //                     . "\n<b>–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã:</b> " . $user->name . "\n<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤:</b> " . $user->score . "\n";
        //                     break;
        //                 case 2:$text_to_admin .= "------------------ü•â------------------\n<b>ID –∫–æ–º–∞–Ω–¥—ã:</b> " . $user->id
        //                     . "\n<b>–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã:</b> " . $user->name . "\n<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤:</b> " . $user->score . "\n";
        //                     break;
        //                 default:$text_to_admin .= "--------------------------------------\n<b>ID –∫–æ–º–∞–Ω–¥—ã:</b> " . $user->id
        //                     . "\n<b>–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã:</b> " . $user->name . "\n<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤:</b> " . $user->score . "\n";
        //                     break;
        //             }
        //         }
        //         $text_to_admin .= "--------------------------------------\n";
        //         break;
        //     case '/clear_team':
        //         $user = User::find($number);

        //         if (is_null($user)) {
        //             $text_to_admin = "–ö–æ–º–∞–Ω–¥—ã <b>‚Ññ" . $number . "</b> –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!\n";
        //             break;
        //         }
        //         $user->score = 0;
        //         $user->save();
        //         $text_to_admin = "–ü—Ä–æ–≥—Ä–µ—Å—Å –∫–æ–º–∞–Ω–¥—ã <b>" . $user->name . "</b> –æ–±–Ω—É–ª–µ–Ω!\n";

        //         event(new Score($user));
        //         break;
        //     case '/clear_ban':
        //         $user = User::find($number);
        //         $task = Task::find($secondNumber);
        //         $ban = Ban::where('user_id', $number)->where('task_id', $secondNumber)->first();
        //         if (is_null($ban)) {
        //             $text_to_admin = "–ó–∞–¥–∞–Ω–∏–µ <b>" . $task->name . "</b> –∫–æ–º–∞–Ω–¥—ã <b>" . $user->name . "</b> –Ω–µ –±—ã–ª–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ!\n";
        //             break;
        //         }
        //         $ban->delete();

        //         $text_to_admin = "–ó–∞–¥–∞–Ω–∏–µ <b>" . $task->name . "</b> –∫–æ–º–∞–Ω–¥—ã <b>" . $user->name . "</b> —Ä–∞–∑–±–∞–Ω–µ–Ω–æ!\n";
        //         $text_to_users = "üö¶ –ó–∞–¥–∞–Ω–∏–µ <b>" . $task->name . "</b> –∫–æ–º–∞–Ω–¥—ã <b>" . $user->name . "</b> —Ä–∞–∑–±–∞–Ω–µ–Ω–æ!\n";

        //         event(new BanUpdate($ban, false));

        //         Telegram::sendMessage([
        //             'chat_id' => config('telegram.channel'),
        //             'parse_mode' => 'HTML',
        //             'text' => $text_to_users,
        //         ]);
        //         break;
        //     case '/add':
        //         $user = User::find($number);
        //         if (is_null($user)) {
        //             $text_to_admin = "–ö–æ–º–∞–Ω–¥—ã —Å —Ç–∞–∫–∏–º ID –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!\n";
        //             break;
        //         }
        //         $score_to_save = $user->score;
        //         $user->score = $score_to_save + $secondNumber;
        //         $user->save();
        //         $text_to_admin = "–ö–æ–º–∞–Ω–¥–µ <b>" . $user->name . "</b> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ <b>" . $secondNumber . "</b> –æ—á–∫–æ–≤!\n";
        //         $text_to_users = "‚ö°Ô∏è –ö–æ–º–∞–Ω–¥–µ <b>" . $user->name . "</b> –¥–æ–±–∞–≤–ª–µ–Ω–æ <b>" . $secondNumber . "</b> –æ—á–∫–æ–≤!\n";

        //         event(new Score($user));

        //         Telegram::sendMessage([
        //             'chat_id' => config('telegram.channel'),
        //             'parse_mode' => 'HTML',
        //             'text' => $text_to_users,
        //         ]);
        //         break;
        //     case '/remove':
        //         $user = User::find($number);
        //         if (is_null($user)) {
        //             $text_to_admin = "–ö–æ–º–∞–Ω–¥—ã —Å —Ç–∞–∫–∏–º ID –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!\n";
        //             break;
        //         }
        //         $score_to_save = $user->score;
        //         $user->score = $score_to_save - $secondNumber;
        //         $user->save();
        //         $text_to_admin = "–ö–æ–º–∞–Ω–¥–µ <b>" . $user->name . "</b> —É—Å–ø–µ—à–Ω–æ –æ—Ç–Ω—è—Ç–æ <b>" . $secondNumber . "</b> –æ—á–∫–æ–≤!\n";
        //         $text_to_users = "‚ö°Ô∏è –ö–æ–º–∞–Ω–¥–µ <b>" . $user->name . "</b> –æ—Ç–Ω—è—Ç–æ <b>" . $secondNumber . "</b> –æ—á–∫–æ–≤!\n";

        //         event(new Score($user));

        //         Telegram::sendMessage([
        //             'chat_id' => config('telegram.channel'),
        //             'parse_mode' => 'HTML',
        //             'text' => $text_to_users,
        //         ]);
        //         break;
        // }
        // Telegram::sendMessage([
        //     'chat_id' => '-1001308540909',
        //     'parse_mode' => 'HTML',
        //     'text' => $text_to_admin,
        // ]);
    }
}
